using System;

namespace ColegioElCoyoteFeliz
{
    // Usamos una struct para la representación del estudiante.
    public struct Estudiante
    {
        public string Nombre;
        public float NotaFinal;
        public int Edad;
        public char Sexo;
    }

    internal class Program
    {
        // Constante para el número máximo de estudiantes.
        private const int MAX_ESTUDIANTES = 5;

        static void Main(string[] args)
        {
            // Se usa un arreglo de Estudiante para almacenar los datos.
            Estudiante[] estudiantes = new Estudiante[MAX_ESTUDIANTES];
            int numEstudiantes = 0; // Contador de estudiantes ingresados realmente.

            Console.WriteLine("--- COLEGIO EL COYOTE FELIZ: REGISTRO DE ESTUDIANTES ---");


            // Bucle para el ingreso de datos
            while (numEstudiantes < MAX_ESTUDIANTES)
            {
                Console.WriteLine($"\nIngreso del Estudiante #{numEstudiantes + 1} (o escriba 'fin' en el nombre para terminar):");

                Console.Write("Nombre del estudiante: ");
                string tempNombre = Console.ReadLine();

                // Condición de salida por el usuario
                if (string.Equals(tempNombre, "fin", StringComparison.OrdinalIgnoreCase))
                {
                    break;
                }
                estudiantes[numEstudiantes].Nombre = tempNombre;

                // Llamadas a métodos de lectura con validación
                estudiantes[numEstudiantes].NotaFinal = LeerNota();
                estudiantes[numEstudiantes].Edad = LeerEdad();
                estudiantes[numEstudiantes].Sexo = LeerSexo();

                numEstudiantes++;
            }

            // Validar si se ingresaron datos
            if (numEstudiantes == 0)
            {
                Console.WriteLine("\nNo se ingresó ningún estudiante. Fin del programa.");
                return;
            }

            // Mostrar los resultados de los cálculos
            MostrarResultados(estudiantes, numEstudiantes);
        }

        /// <summary>
        /// Lee y valida la nota final del estudiante (entre 0.0 y 10.0).
        /// </summary>
        static float LeerNota()
        {
            float nota;
            Console.Write("Nota Final (0.0 a 10.0): ");
            // Bucle de validación: intenta parsear Y verifica el rango.
            while (!float.TryParse(Console.ReadLine(), out nota) || nota < 0.0f || nota > 10.0f)
            {
                Console.Write("Nota inválida. Ingrese una nota entre 0.0 y 10.0: ");
            }
            return nota;
        }

        /// <summary>
        /// Lee y valida la edad del estudiante (debe ser positiva).
        /// </summary>
        static int LeerEdad()
        {
            int edad;
            Console.Write("Edad: ");
            // Bucle de validación: intenta parsear Y verifica que sea positiva.
            while (!int.TryParse(Console.ReadLine(), out edad) || edad <= 0)
            {
                Console.Write("Edad inválida. Ingrese una edad positiva: ");
            }
            return edad;
        }

        /// <summary>
        /// Lee y valida el sexo del estudiante ('M' o 'F').
        /// </summary>
        static char LeerSexo()
        {
            char sexo;
            string input;
            Console.Write("Sexo ('M' o 'F'): ");
            // Bucle de validación: lee y verifica que sea 'M' o 'F'.
            do
            {
                input = Console.ReadLine().ToUpper(); // Convertir a mayúsculas para simplificar la verificación
                if (input.Length == 1 && (input[0] == 'M' || input[0] == 'F'))
                {
                    sexo = input[0];
                    return sexo;
                }
                Console.Write("Sexo inválido. Ingrese 'M' o 'F': ");
            } while (true);
        }

        /// <summary>
        /// Muestra todos los resultados de los cálculos solicitados.
        /// </summary>
        static void MostrarResultados(Estudiante[] estudiantes, int numEstudiantes)
        {
            Console.WriteLine("--- RESULTADOS DE LOS CÁLCULOS ---");

            // 1. Contar estudiantes masculinos mayores de 18
            int hombresMayores = ContarHombresMayores18(estudiantes, numEstudiantes);
            Console.WriteLine($"1. Cantidad de estudiantes masculinos mayores de 18: {hombresMayores}");

            // 2. Encontrar la mujer con la menor nota
            Estudiante? mujerMenorNota = EncontrarMujerMenorNota(estudiantes, numEstudiantes);
            Console.Write("2. Estudiante mujer con la menor nota: ");
            if (mujerMenorNota.HasValue)
            {
                // Usamos formato F1 para mostrar un decimal en la nota.
                Console.WriteLine($"{mujerMenorNota.Value.Nombre} con una nota de {mujerMenorNota.Value.NotaFinal:F1}");
            }
            else
            {
                Console.WriteLine("No se registraron estudiantes de sexo femenino.");
            }

            // 3. Buscar estudiante por nombre
            Console.Write("\n3. Ingrese el nombre del estudiante a buscar: ");
            string nombreBuscar = Console.ReadLine();
            bool encontrado = BuscarEstudiantePorNombre(estudiantes, numEstudiantes, nombreBuscar);

            Console.Write($"Resultado de la búsqueda para '{nombreBuscar}': ");
            if (encontrado)
            {
                Console.WriteLine("¡ESTUDIANTE ENCONTRADO!.");
            }
            else
            {
                Console.WriteLine("Estudiante NO ENCONTRADO.");
            }

            Console.WriteLine("\n--- FIN DEL PROGRAMA ---");
        }

        /// <summary>
        /// Cuenta cuántos estudiantes son hombres y tienen más de 18 años.
        /// (Esta función ya estaba simple y sin LINQ, se mantiene).
        /// </summary>
        static int ContarHombresMayores18(Estudiante[] estudiantes, int numEstudiantes)
        {
            int contador = 0;
            // Iteración simple con ciclo for.
            for (int i = 0; i < numEstudiantes; ++i)
            {
                // Verificación simple con operadores lógicos.
                if (estudiantes[i].Sexo == 'M' && estudiantes[i].Edad > 18)
                {
                    contador++;
                }
            }
            return contador;
        }

        /// <summary>
        /// Encuentra a la estudiante mujer con la menor nota final.
        /// REFACTORIZADO: Usa lógica de bucle simple sin LINQ.
        /// </summary>
        static Estudiante? EncontrarMujerMenorNota(Estudiante[] estudiantes, int numEstudiantes)
        {
            Estudiante? mujerMenorNota = null; // Usamos null para indicar que aún no hemos encontrado una mujer
            float notaMinima = float.MaxValue; // Inicializamos la nota mínima con el valor máximo posible

            // Recorremos solo hasta donde hay estudiantes ingresados (numEstudiantes)
            for (int i = 0; i < numEstudiantes; i++)
            {
                // 1. Verificamos si es mujer ('F')
                if (estudiantes[i].Sexo == 'F')
                {
                    // 2. Comparamos la nota actual con la nota mínima encontrada hasta ahora
                    if (estudiantes[i].NotaFinal < notaMinima)
                    {
                        notaMinima = estudiantes[i].NotaFinal; // Actualizamos la nota mínima
                        mujerMenorNota = estudiantes[i];      // Almacenamos el objeto Estudiante
                    }
                }
            }
            return mujerMenorNota;
        }

        /// <summary>
        /// Busca un estudiante por su nombre (o parte de su nombre), ignorando mayúsculas/minúsculas.
        /// REFACTORIZADO: Usa lógica de bucle simple sin LINQ.
        /// </summary>
        static bool BuscarEstudiantePorNombre(Estudiante[] estudiantes, int numEstudiantes, string nombreBuscar)
        {
            // Recorremos solo hasta donde hay estudiantes ingresados (numEstudiantes)
            for (int i = 0; i < numEstudiantes; i++)
            {
                // Usamos la función IndexOf con StringComparison.OrdinalIgnoreCase para buscar
                // sin importar mayúsculas/minúsculas. Retorna >= 0 si el texto está contenido.
                if (estudiantes[i].Nombre.IndexOf(nombreBuscar, StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    return true; // Si lo encuentra, retorna true inmediatamente (equivalente a .Any())
                }
            }
            return false; // Si termina el ciclo sin encontrarlo, retorna false
        }
    }
}
